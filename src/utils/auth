import NextAuth, { type DefaultSession } from "next-auth";

declare module "next-auth" {
    interface Session {
        user: {
            /** The user's id. */
            id: string;
        } & DefaultSession["user"];
    }
}

export const {
    handlers: { GET, POST },
    auth,
} = NextAuth({
    providers: [],
    callbacks: {
        jwt({ token, profile }) {
            // if (profile) {
            //     token.id = profile?.id;
            //     token.image = profile?.avatar_url || profile?.picture;
            // }
            return token;
        },
        session: ({ session, token }) => {
            if (session?.user && token?.id) {
                session.user.id = String(token.id);
            }
            return session;
        },
        // authorized({ auth }) {
        //     return !!auth?.user; // this ensures there is a logged in user for -every- request
        // },
    },
    pages: {
        signIn: "/auth/signin", // overrides the next-auth default signin page https://authjs.dev/guides/basics/pages
        signOut: "/auth/signout",
        error: "/auth/error", // Error code passed in query string as ?error=
        verifyRequest: "/auth/verify-request", // (used for check email message)
        newUser: "/auth/new-user", // New users will be directed here on first sign in (leave the property out if not of interest)
    },
});
