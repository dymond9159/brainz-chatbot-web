import NextAuth, { type DefaultSession, type NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import Github from "next-auth/providers/github";
import EmailProvider from "next-auth/providers/email";
import CredentialsProvider from "next-auth/providers/credentials";
import { Provider } from "next-auth/providers/index";

declare module "next-auth" {
    interface Session {
        user: {
            /** The user's id. */
            id: string;
        } & DefaultSession["user"];
    }
}

// const GitHub: Provider = GithubProvider({
//     clientId: process.env.GITHUB_ID ?? "",
//     clientSecret: process.env.GITHUB_SECRET ?? "",
// });

// Google authentication providers
const Google: Provider = GoogleProvider({
    clientId: process.env.GOOGLE_ID ?? "",
    clientSecret: process.env.GOOGLE_SECRET ?? "",
});

// Sign in with passwordless email link
const Email: Provider = EmailProvider({
    server: process.env.MAIL_SERVER,
    from: process.env.FROM_EMAIL,
});

const Credential: Provider = CredentialsProvider({
    // The name to display on the sign in form (e.g. 'Sign in with...')
    name: "Credentials",
    // The credentials is used to generate a suitable form on the sign in page.
    // You can specify whatever fields you are expecting to be submitted.
    // e.g. domain, username, password, 2FA token, etc.
    // You can pass any HTML attribute to the <input> tag through the object.
    credentials: {
        username: {
            label: "Username",
            type: "text",
            placeholder: "jsmith",
        },
        password: { label: "Password", type: "password" },
    },
    async authorize(credentials, req) {
        // You need to provide your own logic here that takes the credentials
        // submitted and returns either a object representing a user or value
        // that is false/null if the credentials are invalid.
        // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }
        // You can also use the `req` object to obtain additional parameters
        // (i.e., the request IP address)
        const res = await fetch("/your/endpoint", {
            method: "POST",
            body: JSON.stringify(credentials),
            headers: { "Content-Type": "application/json" },
        });
        const user = await res.json();

        // If no error and we have user data, return it
        if (res.ok && user) {
            return user;
        }
        // Return null if user data could not be retrieved
        return null;
    },
});

const authOptions: NextAuthOptions = {
    // Configure one or more authentication providers
    providers: [Github],
    secret: "LlKq6ZtYbr+hTC073mAmAh9/h2HwMfsFo4hrfCx5mLg=",
    callbacks: {
        async jwt({ token, user, account, profile, isNewUser }) {
            // Persist the OAuth access_token to the token right after signin
            if (account) {
                token.accessToken = account.access_token;
            }
            return token;
        },
        async session({ session, token, user }) {
            // Send properties to the client, like an access_token from a provider.
            // session.accessToken = token.accessToken;
            return session;
        },
    },
    // pages: {
    //     signIn: "/auth/signin",
    //     signOut: "/auth/signout",
    //     error: "/auth/error", // Error code passed in query string as ?error=
    //     verifyRequest: "/auth/verify-request", // (used for check email message)
    //     newUser: "/auth/new-user", // New users will be directed here on first sign in (leave the property out if not of interest)
    // },
};

export const {
    handlers: { GET, POST },
    signIn,
    signOut,
    auth,
} = NextAuth(authOptions);
